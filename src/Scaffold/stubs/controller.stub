<?php
/**
 * @author Talemul Islam <talemulislam@gmail.com>
 * @link   https://talemul.com
 */

namespace DummyNamespace;

use DummyModelNamespace;
use SuperAdmin\Admin\Controllers\AdminController;
use SuperAdmin\Admin\Form;
use SuperAdmin\Admin\Grid;
use SuperAdmin\Admin\Show;

class DummyClass extends AdminController
{
    /**
     * Make a grid builder.
     *
     * @return Grid
     */
    protected function grid()
    {
        $grid = new Grid(new DummyModel());

DummyGridField

        return $grid;
    }

    /**
     * Make a show builder.
     *
     * @param mixed $id
     * @return Show
     */
    protected function detail($id)
    {
        $show = new Show(DummyModel::findOrFail($id));

DummyShowField

        return $show;
    }

    /**
     * Make a form builder.
     *
     * @return Form
     */
    protected function form()
    {
        $form = new Form(new DummyModel());

DummyFormField

        return $form;
    }

    /**
     * Build options array for select/radio/checkbox inputs.
     *
     * @param string|null $source  'static' or FQCN like 'App\\Models\\User'
     * @param string|null $value   CSV values for static, or DB column for model (default 'id')
     * @param string|null $label   CSV labels for static, or DB column for model (default 'name')
     * @return array<string,string>
     */
    protected function optionsMap(?string $source, ?string $value, ?string $label): array
    {
        if (!$source) {
            return [];
        }

        if ($source === 'static') {
            $values = $this->csvToArray($value);
            $labels = $this->csvToArray($label);
            $out = [];
            foreach ($values as $i => $v) {
                $out[$v] = $labels[$i] ?? $v;
            }
            return $out;
        }

        // Model source
        $fqcn = ltrim((string)$source, '\\');
        if (!class_exists($fqcn)) {
            return [];
        }

        $v = $value ?: 'id';
        $l = $label ?: 'name';

        // pluck(label, value) => [value => label]
        return $fqcn::query()->pluck($l, $v)->toArray();
    }

    /**
     * Split comma separated values safely.
     *
     * @param string|null $csv
     * @return array<int,string>
     */
    protected function csvToArray(?string $csv): array
    {
        if (!$csv) return [];
        return array_values(array_filter(array_map('trim', explode(',', $csv)), 'strlen'));
    }
}
